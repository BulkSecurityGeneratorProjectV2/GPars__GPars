/*
 * Copyright 2010-2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author Andres Almiray, Jan Novotny, Marcel Matula, Michal Bernhard
 */
buildscript {
    repositories {
        mavenCentral()
        mavenRepo name: 'SpringSource', urls: 'http://repository.springsource.com/maven/bundles/release'
    }

    dependencies {
        classpath("org.grails:grails-docs:1.3.6") { transitive = false }
        classpath("org.xhtmlrenderer:core-renderer:R8pre2") { transitive = false }
        classpath("com.lowagie:itext:2.0.8") { transitive = false }
        classpath("radeox:radeox:1.0-b2") { transitive = false }
    }
}

task buildGuide(type: Copy) {
    def manualSrc = 'grails-doc/src' as File
    destinationDir = "$buildDir/manual" as File
    from(manualSrc) {
        include '*.properties'
    }

    doLast {
        ant.taskdef(name: 'docs', classname: 'grails.doc.ant.DocPublisherTask', classpath: configurations.docs.asPath);
        ant.docs(src: 'grails-doc/src',
                dest: "$buildDir/manual",
                properties: "grails-doc/src/doc.properties",
                styleDir: new File('grails-doc/resources/style'),
                cssDir: new File('grails-doc/resources/css'),
                imagesDir: new File('grails-doc/resources/img')
        )
    }

}

task pdfGuide(type: Copy) {
    dependsOn { buildGuide }

    inputs.dir("$buildDir/manual" as File)
    outputs.files "$buildDir/manual/guide.pdf"

    doFirst {
        try {
            grails.doc.PdfBuilder.build(
                    basedir: buildDir.absolutePath,
                    home: project.file('.').absolutePath,
                    tool: 'gpars'
            )
        } catch (x) {
            // it's very likely that the stream is closed before
            // the renderer 'finishes' but it actually does
            // ignore for now
        }
    }

    destinationDir = "$buildDir/manual" as File
    from "$destinationDir/guide/"
    include '*.pdf'
    rename 'single.pdf', "gpars-guide-${version}.pdf"

    doLast {
        delete "$destinationDir/guide/single.pdf"
        delete "$destinationDir/doc.properties"
    }
}

task zipGuide(type: Zip) {
    dependsOn { [pdfGuide] }
    appendix = 'guide'
    from "$buildDir/manual"
}
