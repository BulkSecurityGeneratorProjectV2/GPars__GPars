Once you are setup, try the following Groovy script to test that your setup is functioning as it should.
{code}
import static groovyx.gpars.actor.Actors.actor

/**
 * A demo showing two cooperating actors. The decryptor decrypts received messages and replies them back.
 * The console actor sends a message to decrypt, prints out the reply and terminates both actors.
 * The main thread waits on both actors to finish using the join() method to prevent premature exit,
 * since both actors use the default actor group,  which uses a daemon thread pool.
 * @author Dierk Koenig, Vaclav Pech
 */

def decryptor = actor {
    loop {
        react { message ->
            if (message instanceof String) reply message.reverse()
            else stop()
        }
    }
}

def console = actor {
    decryptor.send 'lellarap si yvoorG'
    react {
        println 'Decrypted message: ' + it
        decryptor.send false
    }
}

[decryptor, console]*.join()
{code}
You should get a message "Decrypted message: Groovy is parallel" printed out on the console when you run the code.

{note:Title=Java API}
GPars has been designed primarily for use with the Groovy programming language.  Of course all Java and
Groovy programs are just bytecodes running on the JVM, so GPars can be used with Java source.  Despite being
aimed at Groovy code use, the solid technical foundation, plus the good performance characteristics, of GPars
make it an excellent library for Java programs. In fact most of GPars is written in Java, so there
is no performance penalty for Java applications using GPars.

For details please refer to the Java API section.
{note}

To quick-test using GPars via the Java API, you can compile and run the following Java code:
{code}
import groovyx.gpars.MessagingRunnable;
import groovyx.gpars.actor.DynamicDispatchActor;

public class StatelessActorDemo {
    public static void main(String[] args) throws InterruptedException {
        final MyStatelessActor actor = new MyStatelessActor();
        actor.start();
        actor.send("Hello");
        actor.sendAndWait(10);
        actor.sendAndContinue(10.0, new MessagingRunnable<String>() {
            @Override protected void doRun(final String s) {
                System.out.println("Received a reply " + s);
            }
        });
    }
}

class MyStatelessActor extends DynamicDispatchActor {
    public void onMessage(final String msg) {
        System.out.println("Received " + msg);
        replyIfExists("Thank you");
    }

    public void onMessage(final Integer msg) {
        System.out.println("Received a number " + msg);
        replyIfExists("Thank you");
    }

    public void onMessage(final Object msg) {
        System.out.println("Received an object " + msg);
        replyIfExists("Thank you");
    }
}
{code}
Remember though that you will almost certainly have to add the Groovy artefact to the build as well as the
GPars artefact.  GPars may well work at Java speeds with Java applications, but it still has some
compilation dependencies on Groovy.
