h3. The Sieve of Eratosthenes implementation using dataflow

{code}
import groovyx.gpars.dataflow.DataFlowStream
import groovyx.gpars.group.DefaultPGroup

/**
 * Demonstrates concurrent implementation of the Sieve of Eratosthenes using dataflow
 */

final int requestedPrimeNumberCount = 100

final DataFlowStream initialChannel = new DataFlowStream()

/**
 * Generating candidate numbers
 */
task {
    (2..10000).each {
        initialChannel << it
    }
}

/**
 * Chain a new filter for a particular prime number to the end of the Sieve
 * @param inChannel The current end channel to consume
 * @param prime The prime number to divide future prime candidates with
 * @return A new channel ending the whole chain
 */
def filter(inChannel, int prime) {
    def outChannel = new DataFlowStream()

    operator([inputs: [inChannel], outputs: [outChannel]]) {
        if (it % prime != 0) {
            bindOutput it
        }
    }
    return outChannel
}

/**
 * Consume Sieve output and add additional filters for all found primes
 */
def currentOutput = initialChannel
requestedPrimeNumberCount.times {
    int prime = currentOutput.val
    println "Found: $prime"
    currentOutput = filter(currentOutput, prime)
}

{code}