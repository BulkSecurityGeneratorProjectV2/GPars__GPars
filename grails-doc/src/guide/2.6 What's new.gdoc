Again, the new release, this time GPars 0.11, introduces a lot of gradual enhancements and improvements on top of the previous release.

Check out the "JIRA release notes":http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=12030&version=16994

h3. Project changes

{note:Title=Breaking Changes}
See "the Breaking Changes listing":http://gpars.codehaus.org/Breaking+Changes for the list of breaking changes.
{note}

h3. Asynchronous functions

* The asyncFun() method now creates composable asynchronous functions

h3. Parallel collections

* Renamed makeTransparent() to makeConcurrent()
* Collections can now repeatedly be made transparently concurrent or sequential using makeConcurrent() and makeSequential() methods

h3. Fork / Join

* A few new demos illustrating Fork/Join applicability to recursive functions
* Leveraging the efficient implementation of the jsr-166y (aka Java 7) Fork/Join library
* The runChildDirectly() method allowing to mix asynchronous and synchronous child task execution

h3. Actors

* Active Objects wrapping actors with an OO facade
* Enhanced DynamicDispatchActor's API for dynamic message handler registration
* Added BlockingActor to allow for non-conntiuation style actors
* Removed the deprecated actor classes

h3. Dataflow

h3. Agent

h3. Stm

* Initial support for Stm through Multiverse was added

h3. Other

* Switched to the most recent Java 7 Fork/Join library to ensure compatibility with future JDKs
* Raised the Groovy level used for compilation to 1.7
* Created a pdf version of the user guide
* An update to the stand-alone maven-based Java API "demo application":http://bamboo.ci.codehaus.org/browse/GPARS-REL-9/artifact/GPars-Java-API-integration-demo-project/gpars-mvn-java-demo-0.11.zip was added to show GPars integration and use from Java
* Added numerous code examples and demos
* Enhanced project documentation

h3. Renaming hints

* The _makeTransparent()_ method that forces concurrent semantics to iteration methods (each, collect, find, etc.) has been renamed to _makeConcurrent()_
* Capitalization has changed in the names of dataflow classes DataFlow -> Dataflow e.g. DataFlowVariable is now called DataflowVariable
