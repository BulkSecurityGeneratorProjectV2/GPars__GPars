Using GPars is very addictive, I guarantee. Once you get hooked you won't be able to code without it.
May the world force you to write code in Java, you will still be able to benefit from most of GPars features.

h3. Java API specifics

Some parts of GPars are irrelevant in Java and it is better to use the underlying Java libraries directly:
* Parallel Collection - use jsr-166y library's Parallel Array directly
* Fork/Join - use jsr-166y library's Fork/Join support directly
* Asynchronous functions - use Java executor services directly

The other parts of GPars can be used from Java just like from Groovy, although most will miss the Groovy DSL capabilities.

h3. GPars Closures in Java API

To overcome the lack of closures as a language element in Java and to avoid forcing users to use Groovy closures directly
through the Java API, a few handy wrapper classes have been provided to help you define callbacks, actor body or dataflow tasks.
* groovyx.gpars.MessagingRunnable - used for single-argument callbacks or actor body
* groovyx.gpars.ReactorMessagingRunnable - used for ReactiveActor body
* groovyx.gpars.DataFlowMessagingRunnable - used for dataflow operators' body

These classes can be used in all places GPars API expects a Groovy closure.

h3. Actors

The _DynamicDispatchActor_ as well as the _ReactiveActor_ classes can be used just like in Groovy:

{code}
 import groovyx.gpars.MessagingRunnable;
 import groovyx.gpars.actor.DynamicDispatchActor;

 public class StatelessActorDemo {
     public static void main(String[] args) throws InterruptedException {
         final MyStatelessActor actor = new MyStatelessActor();
         actor.start();
         actor.send("Hello");
         actor.sendAndWait(10);
         actor.sendAndContinue(10.0, new MessagingRunnable<String>() {
             @Override protected void doRun(final String s) {
                 System.out.println("Received a reply " + s);
             }
         });
     }
 }

 class MyStatelessActor extends DynamicDispatchActor {
     public void onMessage(final String msg) {
         System.out.println("Received " + msg);
         replyIfExists("Thank you");
     }

     public void onMessage(final Integer msg) {
         System.out.println("Received a number " + msg);
         replyIfExists("Thank you");
     }

     public void onMessage(final Object msg) {
         System.out.println("Received an object " + msg);
         replyIfExists("Thank you");
     }
 }
{code}

Although there are not many differences between Groovy and Java GPars use, notice, the callbacks instantiating the MessagingRunnable class in place for a groovy closure.

{code}
import groovy.lang.Closure;
import groovyx.gpars.ReactorMessagingRunnable;
import groovyx.gpars.actor.Actor;
import groovyx.gpars.actor.ReactiveActor;

public class ReactorDemo {
    public static void main(final String[] args) throws InterruptedException {
        final Closure handler = new ReactorMessagingRunnable<Integer, Integer>() {
            @Override protected Integer doRun(final Integer integer) {
                return integer * 2;
            }
        };
        final Actor actor = new ReactiveActor(handler);
        actor.start();

        System.out.println("Result: " +  actor.sendAndWait(1));
        System.out.println("Result: " +  actor.sendAndWait(2));
        System.out.println("Result: " +  actor.sendAndWait(3));
    }
}
{code}

h3. Convenience factory methods

Obviously, all the essential factory methods to build actors quickly are available where you'd expect them.

{code}

import groovy.lang.Closure;
import groovyx.gpars.ReactorMessagingRunnable;
import groovyx.gpars.actor.Actor;
import groovyx.gpars.actor.Actors;

public class ReactorDemo {
    public static void main(final String[] args) throws InterruptedException {
        final Closure handler = new ReactorMessagingRunnable<Integer, Integer>() {
            @Override protected Integer doRun(final Integer integer) {
                return integer * 2;
            }
        };
        final Actor actor = Actors.reactor(handler);

        System.out.println("Result: " +  actor.sendAndWait(1));
        System.out.println("Result: " +  actor.sendAndWait(2));
        System.out.println("Result: " +  actor.sendAndWait(3));
    }
}
{code}

h3. Agents

{code}
 import groovyx.gpars.MessagingRunnable;
 import groovyx.gpars.agent.Agent;

 public class AgentDemo {
     public static void main(final String[] args) throws InterruptedException {
         final Agent counter = new Agent<Integer>(0);
         counter.send(10);
         System.out.println("Current value: " + counter.getVal());
         counter.send(new MessagingRunnable<Integer>() {
             @Override protected void doRun(final Integer integer) {
                 counter.updateValue(integer + 1);
             }
         });
         System.out.println("Current value: " + counter.getVal());
     }
 }
{code}

h3. Dataflow Concurrency

Both _DataFlowVariables_ and _DataFlowQueues_ can be used from Java without any hiccups. Just avoid the handy overloaded operators
and go straight to the methods, like _bind_ , _whenBound_, _getVal_ and other.
You may also continue using dataflow _tasks_ passing to them instances of _Runnable_ or _Callable_ just like groovy _Closure_ .

{code}

import groovyx.gpars.MessagingRunnable;
import groovyx.gpars.dataflow.DataFlowVariable;
import groovyx.gpars.group.DefaultPGroup;

import java.util.concurrent.Callable;

public class DataFlowTaskDemo {
    public static void main(final String[] args) throws InterruptedException {
        final DefaultPGroup group = new DefaultPGroup(10);

        final DataFlowVariable a = new DataFlowVariable();

        group.task(new Runnable() {
            public void run() {
                a.bind(10);
            }
        });

        final DataFlowVariable result = group.task(new Callable() {
            public Object call() throws Exception {
                return (Integer)a.getVal() + 10;
            }
        });

        result.whenBound(new MessagingRunnable<Integer>() {
            @Override protected void doRun(final Integer integer) {
                System.out.println("arguments = " + integer);
            }
        });

        System.out.println("result = " + result.getVal());
    }
}
{code}

h3. Dataflow operators

The sample below should illustrate the main differences between Groovy and Java API for dataflow operators.
# Use the convenience factory methods accepting list of channels to create operators or selectors
# Use _DataFlowMessagingRunnable_ to specify the operator body
# Call _getOwningProcessor()_ to get hold of the operator from within the body in order to e.g. bind output values

{code}

import groovyx.gpars.DataFlowMessagingRunnable;
import groovyx.gpars.dataflow.DataFlow;
import groovyx.gpars.dataflow.DataFlowQueue;
import groovyx.gpars.dataflow.operator.DataFlowProcessor;

import java.util.Arrays;
import java.util.List;

public class DataflowOperatorDemo {
    public static void main(final String[] args) throws InterruptedException {
        final DataFlowQueue stream1 = new DataFlowQueue();
        final DataFlowQueue stream2 = new DataFlowQueue();
        final DataFlowQueue stream3 = new DataFlowQueue();
        final DataFlowQueue stream4 = new DataFlowQueue();

        final DataFlowProcessor op1 = DataFlow.selector(Arrays.asList(stream1), Arrays.asList(stream2), new DataFlowMessagingRunnable(1) {
            @Override protected void doRun(final Object[] objects) {
                getOwningProcessor().bindOutput(2*(Integer)objects[0]);
            }
        });

        final List secondOperatorInput = Arrays.asList(stream2, stream3);

        final DataFlowProcessor op2 = DataFlow.operator(secondOperatorInput, Arrays.asList(stream4), new DataFlowMessagingRunnable(2) {
            @Override protected void doRun(final Object[] objects) {
                getOwningProcessor().bindOutput((Integer) objects[0] + (Integer) objects[1]);
            }
        });

        stream1.bind(1);
        stream1.bind(2);
        stream1.bind(3);
        stream3.bind(100);
        stream3.bind(100);
        stream3.bind(100);
        System.out.println("Result: " + stream4.getVal());
        System.out.println("Result: " + stream4.getVal());
        System.out.println("Result: " + stream4.getVal());
        op1.stop();
        op2.stop();
    }
}
{code}

h3. Performance

In general, GPars overhead is identical irrespective of whether you use it from Groovy or Java and tends to be very low.
GPars actors, for example, can compete head-to-head with other JVM actor options, like Scala actors.

Since Groovy code in general runs slower than Java code, mainly due to dynamic method invocation, you might consider writing
your code in Java to improve performance. Typically numeric operations or frequent fine-grained method calls within a task or actor body
may benefit from a rewrite into Java.

h3. Prerequisites

All the GPars integration rules apply to Java projects just like they do to Groovy projects. You only need to include the groovy distribution jar file in your project and all is clear to march ahead.
You may also want to check out the sample Java Maven project to get tips on how to integrate GPars into a maven-based pure Java application - "Sample Java Maven Project":http://bamboo.ci.codehaus.org/browse/GPARS-REL-5/artifact/GPars-Java-API-integration-demo-project/gpars-mvn-java-demo-0.11-beta-1.zip
